Index: pages/register_link_page.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import allure\r\nimport random\r\nfrom generator.generator import generated_new_user\r\n\r\nfrom elements import HeaderLinks\r\nfrom helpers import BASE_URL\r\nfrom locators import RegisterLinkLocators, MainLocators\r\nfrom pages import BasePage\r\n\r\n\r\nclass RegisterLinkPage(RegisterLinkLocators, HeaderLinks, MainLocators, BasePage):\r\n\r\n    def __init__(self, driver):\r\n        super().__init__(driver)\r\n\r\n    def open(self):\r\n        self.driver.get(BASE_URL)\r\n\r\n#    @allure.step(\"Assert that page is opened\")\r\n    def assert_register_page_is_opened(self):\r\n        self.assertions.assert_that_element_containce_text(self.TEXT_PAGE_TITLE, 'Register')\r\n        assert self.get_element(self.FOOTER_MENU_WRAPPER)\r\n\r\n        self.save_screenshot('assert_register_page_is_opened.png')\r\n        allure.attach.file(\r\n            \"assert_register_page_is_opened.png\",\r\n            name=\"assert_register_page_is_opened\",\r\n            attachment_type=allure.attachment_type.PNG\r\n        )\r\n\r\n    def validation_message(self):\r\n        self.assertions.assert_that_element_containce_text(self.FIRST_NAME_VALIDATION_ERROR, 'First name is required.')\r\n        self.assertions.assert_that_element_containce_text(self.LAST_NAME_VALIDATION_ERROR, 'Last name is required.')\r\n        self.assertions.assert_that_element_containce_text(self.EMAIL_VALIDATION_ERROR, 'Email is required.')\r\n        self.assertions.assert_that_element_containce_text(self.PASSWORD_VALIDATION_ERROR, 'Password is required.')\r\n        self.assertions.assert_that_element_containce_text(self.CONFIRM_PASSWORD_VALIDATION_ERROR, 'Password is required.')\r\n\r\n        self.save_screenshot('validation_message.png')\r\n        allure.attach.file(\r\n            \"validation_message.png\",\r\n            name=\"validation_message\",\r\n            attachment_type=allure.attachment_type.PNG\r\n        )\r\n\r\n    def new_user_input_data(self):\r\n        gender_list = self.get_elements(self.GENDER_LIST)\r\n        gender_button = gender_list[random.randint(0, 1)]\r\n        self.go_to_element(gender_button)\r\n        gender_button.click()\r\n        user_info = next(generated_new_user())\r\n        first_name = user_info.first_name\r\n        last_name = user_info.last_name\r\n        email = user_info.email\r\n        self.fill(self.FIRST_NAME, first_name)\r\n        self.fill(self.LAST_NAME, last_name)\r\n        self.fill(self.EMAIL, email)\r\n        self.fill(self.PASSWORD, '123456')\r\n        self.fill(self.CONFIRM_PASSWORD, '123456')\r\n        self.click_on_register_button()\r\n        self.assertions.assert_that_element_containce_text(self.COMPLETED_REGISTRATION_TEXT ,\r\n                                                           'Your registration completed')\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pages/register_link_page.py b/pages/register_link_page.py
--- a/pages/register_link_page.py	
+++ b/pages/register_link_page.py	
@@ -16,7 +16,7 @@
     def open(self):
         self.driver.get(BASE_URL)
 
-#    @allure.step("Assert that page is opened")
+    @allure.step("Assert that page is opened")
     def assert_register_page_is_opened(self):
         self.assertions.assert_that_element_containce_text(self.TEXT_PAGE_TITLE, 'Register')
         assert self.get_element(self.FOOTER_MENU_WRAPPER)
@@ -28,6 +28,7 @@
             attachment_type=allure.attachment_type.PNG
         )
 
+    @allure.step("Assert validation message")
     def validation_message(self):
         self.assertions.assert_that_element_containce_text(self.FIRST_NAME_VALIDATION_ERROR, 'First name is required.')
         self.assertions.assert_that_element_containce_text(self.LAST_NAME_VALIDATION_ERROR, 'Last name is required.')
@@ -42,7 +43,8 @@
             attachment_type=allure.attachment_type.PNG
         )
 
-    def new_user_input_data(self):
+    @allure.step("Random new user input data")
+    def random_new_user_input_data(self):
         gender_list = self.get_elements(self.GENDER_LIST)
         gender_button = gender_list[random.randint(0, 1)]
         self.go_to_element(gender_button)
@@ -54,9 +56,23 @@
         self.fill(self.FIRST_NAME, first_name)
         self.fill(self.LAST_NAME, last_name)
         self.fill(self.EMAIL, email)
+        self.fill(self.PASSWORD, '123456')
+        self.fill(self.CONFIRM_PASSWORD, '123456')
+        self.click_on_register_button()
+        self.assertions.assert_that_element_containce_text(self.COMPLETED_REGISTRATION_TEXT,
+                                                           'Your registration completed')
+
+    @allure.step("Registration with dataset")
+    def registration_with_dataset(self):
+        gender_list = self.get_elements(self.GENDER_LIST)
+        gender_button = gender_list[0]
+        self.go_to_element(gender_button)
+        gender_button.click()
+        self.fill(self.FIRST_NAME, "Kristina")
+        self.fill(self.LAST_NAME, "Zhuk")
+        self.fill(self.EMAIL, "123123K@mail.com")
         self.fill(self.PASSWORD, '123456')
         self.fill(self.CONFIRM_PASSWORD, '123456')
         self.click_on_register_button()
-        self.assertions.assert_that_element_containce_text(self.COMPLETED_REGISTRATION_TEXT ,
+        self.assertions.assert_that_element_containce_text(self.COMPLETED_REGISTRATION_TEXT,
                                                            'Your registration completed')
-
Index: tests/test_register_link.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import allure\r\nfrom pages import MainPage\r\nfrom pages.register_link_page import RegisterLinkPage\r\n\r\n\r\n@allure.feature(\"Header Links\")\r\n@allure.title(\"Test open register link\")\r\ndef test_open_register_link(driver):\r\n    main_page = MainPage(driver)\r\n\r\n    main_page.open()\r\n    main_page.assert_that_main_is_opened()\r\n\r\n    main_page.click_on_register()\r\n\r\n    register_link_page = RegisterLinkPage(driver)\r\n    register_link_page.assert_register_page_is_opened()\r\n\r\n\r\n@allure.feature(\"Header Links\")\r\n@allure.title(\"Test registration without entering data\")\r\ndef test_registration_without_entering_data(driver):\r\n    main_page = MainPage(driver)\r\n\r\n    main_page.open()\r\n    main_page.assert_that_main_is_opened()\r\n\r\n    main_page.click_on_register()\r\n\r\n    register_link_page = RegisterLinkPage(driver)\r\n    register_link_page.assert_register_page_is_opened()\r\n\r\n    main_page.click_on_register_button()\r\n\r\n    register_link_page.validation_message()\r\n\r\n\r\n@allure.feature(\"Header Links\")\r\n@allure.title(\"Test new user input data\")\r\ndef test_new_user_input_data(driver):\r\n    main_page = MainPage(driver)\r\n\r\n    main_page.open()\r\n    main_page.click_on_register()\r\n\r\n    register_link_page = RegisterLinkPage(driver)\r\n    register_link_page.assert_register_page_is_opened()\r\n    register_link_page.new_user_input_data()\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/test_register_link.py b/tests/test_register_link.py
--- a/tests/test_register_link.py	
+++ b/tests/test_register_link.py	
@@ -23,28 +23,36 @@
     main_page = MainPage(driver)
 
     main_page.open()
-    main_page.assert_that_main_is_opened()
 
     main_page.click_on_register()
 
     register_link_page = RegisterLinkPage(driver)
-    register_link_page.assert_register_page_is_opened()
-
     main_page.click_on_register_button()
-
     register_link_page.validation_message()
 
 
 @allure.feature("Header Links")
-@allure.title("Test new user input data")
-def test_new_user_input_data(driver):
+@allure.title("Random new user input data")
+def test_random_new_user_input_data(driver):
     main_page = MainPage(driver)
 
     main_page.open()
     main_page.click_on_register()
 
     register_link_page = RegisterLinkPage(driver)
-    register_link_page.assert_register_page_is_opened()
-    register_link_page.new_user_input_data()
+    register_link_page.random_new_user_input_data()
+
+
+@allure.feature("Header Links")
+@allure.title("Registration with dataset")
+def test_registration_with_dataset(driver):
+    main_page = MainPage(driver)
+
+    main_page.open()
+    main_page.click_on_register()
+
+    register_link_page = RegisterLinkPage(driver)
+    register_link_page.registration_with_dataset()
+
 
 
Index: locators/menu_electronics_locators.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from selenium.webdriver.common.by import By\r\n\r\n\r\nclass MenuElectronicsLocators:\r\n    CATEGORY_CAMERA_PHOTO_PICTURE = (By.XPATH, '//img[@alt=\"Picture for category Camera, photo\"]')\r\n    CATEGORY_CELL_PHONES = (By.XPATH, '//img[@alt=\"Picture for category Cell phones\"]')\r\n\r\n    CAMERA_HARD_DRIVE = (By.XPATH, '//img[@alt=\"Picture of 1MP 60GB Hard Drive Handycam Camcorder\"]')\r\n    CAMERA_CAMCORDER = (By.XPATH, '//img[@alt=\"Picture of Camcorder\"\"]')\r\n    CAMERA_DIGITAL_SLR = (By.XPATH, '//img[@alt=\"Picture of Digital SLR Camera 12.2 Mpixel\"\"]')\r\n    CAMERA_HIGH_DEFINITION_CAMCORDER = (By.XPATH, '//img[@alt=\"Picture of High Definition 3D Camcorder\"]')\r\n\r\n    PHONES_SMARTPHONE = (By.XPATH, '//img[@alt=\"Picture of Smartphone\"]')\r\n    PHONES_USED_PHONE = (By.XPATH, '//img[@alt=\"Picture of Used phone\"]')\r\n    PHONES_PHONE_COVER = (By.XPATH, '//img[@alt=\"Picture of Phone Cover\"]')\r\n\r\n    MANUFACTURER_DROPDOWN_MENU = (By.CSS_SELECTOR, 'select[id=\"product_attribute_80_2_37\"]')\r\n    MANUFACTURER_LIST = (By.CSS_SELECTOR, 'select[id=\"product_attribute_80_2_37\"] option[value]')\r\n    COLOR_DROPDOWN_MENU = (By.CSS_SELECTOR, 'select[id=\"product_attribute_80_1_38\"]')\r\n    COLOR_LIST = (By.CSS_SELECTOR, 'select[id=\"product_attribute_80_1_38\"] option[value]')\r\n\r\n    QUANTITY_FIELD = (By.CSS_SELECTOR, 'input[class=\"qty-input\"]')\r\n    ADD_TO_CART_BUTTON_PHONE_COVER = (By.CSS_SELECTOR, 'input[id=\"add-to-cart-button-80\"]')\r\n    ADD_TO_CART_BUTTON_SMARTPHONE = (By.CSS_SELECTOR, 'input[id=\"add-to-cart-button-43\"]')\r\n    CART_WARNING_TEXT = (By.CSS_SELECTOR, 'p[class=\"content\"]')\r\n    APPAREL_TOP_ITEM_PAGE = (By.XPATH, '/html/body/div[4]/div[1]/div[4]/div[2]/div[2]/div[2]'\r\n                                       '/div[3]/div[1]/div/div[2]/h2/a')\r\n    ITEM_NAME = (By.CSS_SELECTOR, 'h1[itemprop=\"name\"]')
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/locators/menu_electronics_locators.py b/locators/menu_electronics_locators.py
--- a/locators/menu_electronics_locators.py	
+++ b/locators/menu_electronics_locators.py	
@@ -22,7 +22,6 @@
     QUANTITY_FIELD = (By.CSS_SELECTOR, 'input[class="qty-input"]')
     ADD_TO_CART_BUTTON_PHONE_COVER = (By.CSS_SELECTOR, 'input[id="add-to-cart-button-80"]')
     ADD_TO_CART_BUTTON_SMARTPHONE = (By.CSS_SELECTOR, 'input[id="add-to-cart-button-43"]')
-    CART_WARNING_TEXT = (By.CSS_SELECTOR, 'p[class="content"]')
     APPAREL_TOP_ITEM_PAGE = (By.XPATH, '/html/body/div[4]/div[1]/div[4]/div[2]/div[2]/div[2]'
                                        '/div[3]/div[1]/div/div[2]/h2/a')
     ITEM_NAME = (By.CSS_SELECTOR, 'h1[itemprop="name"]')
\ No newline at end of file
